{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.smartlogistics.com/v1';\nconst MOCK_MODE = process.env.REACT_APP_MOCK_API === 'true' || true; // Set to false when real APIs are ready\n\nclass ApiService {\n  constructor() {\n    this.authToken = localStorage.getItem('authToken');\n  }\n\n  // Common headers for all requests\n  getHeaders(includeAuth = true) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    if (includeAuth && this.authToken) {\n      headers['Authorization'] = `Bearer ${this.authToken}`;\n    }\n    return headers;\n  }\n\n  // Common request handler with error handling\n  async makeRequest(url, options = {}) {\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...this.getHeaders(),\n          ...options.headers\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Create a new order\n  async createOrder(orderData) {\n    if (MOCK_MODE) {\n      return this.mockCreateOrder(orderData);\n    }\n    return this.makeRequest(`${API_BASE_URL}/orders`, {\n      method: 'POST',\n      body: JSON.stringify(orderData)\n    });\n  }\n\n  // Mock implementation for development\n  mockCreateOrder(orderData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const orderId = 'ORD-' + Date.now();\n        const trackingId = 'TRK' + Math.random().toString(36).substr(2, 9).toUpperCase();\n        resolve({\n          success: true,\n          data: {\n            orderId,\n            trackingId,\n            customerName: orderData.customerName,\n            status: 'created',\n            estimatedDelivery: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n            pickupAddress: orderData.pickupAddress,\n            deliveryAddress: orderData.deliveryAddress,\n            packageType: orderData.packageType,\n            priority: orderData.priority,\n            createdAt: new Date().toISOString()\n          }\n        });\n      }, 1000);\n    });\n  }\n\n  // Get order status by order ID\n  async getOrderStatus(orderId) {\n    if (MOCK_MODE) {\n      return this.mockGetOrderStatus(orderId);\n    }\n    return this.makeRequest(`${API_BASE_URL}/orders/${orderId}`);\n  }\n\n  // Track order by tracking ID\n  async trackOrder(trackingId) {\n    if (MOCK_MODE) {\n      return this.mockTrackOrder(trackingId);\n    }\n    return this.makeRequest(`${API_BASE_URL}/tracking/${trackingId}`);\n  }\n\n  // Mock order status\n  mockGetOrderStatus(orderId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            orderId,\n            status: 'in_transit',\n            currentLocation: 'Distribution Center - Manhattan',\n            estimatedDelivery: '2025-09-27T14:30:00Z',\n            driver: {\n              name: 'John Driver',\n              phone: '+1-555-0123',\n              vehicle: 'VAN-001'\n            },\n            timeline: [{\n              status: 'Order Placed',\n              timestamp: '2025-09-26T09:00:00Z',\n              location: 'Online Platform'\n            }, {\n              status: 'Order Confirmed',\n              timestamp: '2025-09-26T09:15:00Z',\n              location: 'Processing Center'\n            }, {\n              status: 'Picked Up',\n              timestamp: '2025-09-26T11:00:00Z',\n              location: 'Pickup Location'\n            }, {\n              status: 'In Transit',\n              timestamp: '2025-09-26T15:00:00Z',\n              location: 'Distribution Center - Manhattan'\n            }]\n          }\n        });\n      }, 1500);\n    });\n  }\n\n  // Mock tracking\n  mockTrackOrder(trackingId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            trackingId,\n            orderId: 'ORD-' + trackingId.replace('TRK', ''),\n            status: 'in_transit',\n            currentLocation: {\n              address: 'Distribution Center - Manhattan',\n              coordinates: {\n                lat: 40.7128,\n                lng: -74.0060\n              }\n            },\n            estimatedDelivery: '2025-09-27T14:30:00Z',\n            timeline: [{\n              status: 'Order Placed',\n              timestamp: '2025-09-26T09:00:00Z',\n              location: 'Online Platform'\n            }, {\n              status: 'Picked Up',\n              timestamp: '2025-09-26T11:00:00Z',\n              location: 'Pickup Location'\n            }, {\n              status: 'In Transit',\n              timestamp: '2025-09-26T15:00:00Z',\n              location: 'Distribution Center - Manhattan'\n            }]\n          }\n        });\n      }, 1500);\n    });\n  }\n\n  // Route optimization\n  async optimizeRoute(orders) {\n    if (MOCK_MODE) {\n      return this.mockOptimizeRoute(orders);\n    }\n    return this.makeRequest(`${API_BASE_URL}/optimize-route`, {\n      method: 'POST',\n      body: JSON.stringify({\n        orders\n      })\n    });\n  }\n\n  // Get all orders with filtering\n  async getOrders(filters = {}) {\n    if (MOCK_MODE) {\n      return this.mockGetOrders(filters);\n    }\n    const params = new URLSearchParams(filters);\n    return this.makeRequest(`${API_BASE_URL}/orders?${params}`);\n  }\n\n  // Update order status\n  async updateOrderStatus(orderId, status, location = null) {\n    if (MOCK_MODE) {\n      return this.mockUpdateOrderStatus(orderId, status, location);\n    }\n    return this.makeRequest(`${API_BASE_URL}/orders/${orderId}/status`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        status,\n        location\n      })\n    });\n  }\n\n  // Get delivery analytics\n  async getAnalytics(dateRange = '7d') {\n    if (MOCK_MODE) {\n      return this.mockGetAnalytics(dateRange);\n    }\n    return this.makeRequest(`${API_BASE_URL}/analytics?range=${dateRange}`);\n  }\n\n  // Send notification\n  async sendNotification(orderId, type, message) {\n    if (MOCK_MODE) {\n      return this.mockSendNotification(orderId, type, message);\n    }\n    return this.makeRequest(`${API_BASE_URL}/notifications`, {\n      method: 'POST',\n      body: JSON.stringify({\n        orderId,\n        type,\n        message\n      })\n    });\n  }\n\n  // Authentication\n  async login(credentials) {\n    if (MOCK_MODE) {\n      return this.mockLogin(credentials);\n    }\n    const response = await this.makeRequest(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    if (response.token) {\n      this.authToken = response.token;\n      localStorage.setItem('authToken', response.token);\n    }\n    return response;\n  }\n  async logout() {\n    this.authToken = null;\n    localStorage.removeItem('authToken');\n    if (!MOCK_MODE) {\n      return this.makeRequest(`${API_BASE_URL}/auth/logout`, {\n        method: 'POST'\n      });\n    }\n    return Promise.resolve({\n      success: true\n    });\n  }\n\n  // Mock implementations\n  mockOptimizeRoute(orders) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            optimizedRoute: orders.map((order, index) => ({\n              ...order,\n              sequenceNumber: index + 1,\n              estimatedTime: `${10 + index * 15} minutes`,\n              distance: `${2.5 + index * 1.2} miles`\n            })),\n            totalDistance: '15.3 miles',\n            totalTime: '2 hours 45 minutes',\n            fuelCost: '$12.50',\n            efficiency: '87%'\n          }\n        });\n      }, 2000);\n    });\n  }\n  mockGetOrders(filters) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: [{\n            orderId: 'ORD-001',\n            customerName: 'John Doe',\n            status: 'delivered',\n            createdAt: '2025-09-25T10:00:00Z',\n            deliveryAddress: '123 Main St, New York, NY'\n          }, {\n            orderId: 'ORD-002',\n            customerName: 'Jane Smith',\n            status: 'in_transit',\n            createdAt: '2025-09-26T08:30:00Z',\n            deliveryAddress: '456 Oak Ave, Brooklyn, NY'\n          }],\n          pagination: {\n            page: 1,\n            limit: 10,\n            total: 2\n          }\n        });\n      }, 1000);\n    });\n  }\n  mockUpdateOrderStatus(orderId, status, location) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            orderId,\n            status,\n            location,\n            updatedAt: new Date().toISOString()\n          }\n        });\n      }, 500);\n    });\n  }\n  mockGetAnalytics(dateRange) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            totalOrders: 150,\n            deliveredOrders: 142,\n            inTransitOrders: 6,\n            pendingOrders: 2,\n            averageDeliveryTime: '4.2 hours',\n            onTimeDeliveryRate: '94.7%',\n            customerSatisfaction: 4.6,\n            costPerDelivery: '$8.50'\n          }\n        });\n      }, 1000);\n    });\n  }\n  mockSendNotification(orderId, type, message) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            notificationId: 'NOT-' + Date.now(),\n            orderId,\n            type,\n            message,\n            sentAt: new Date().toISOString()\n          }\n        });\n      }, 500);\n    });\n  }\n  mockLogin(credentials) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (credentials.email === 'demo@smartlogistics.com' && credentials.password === 'demo123') {\n          const token = 'mock-jwt-token-' + Date.now();\n          this.authToken = token;\n          localStorage.setItem('authToken', token);\n          resolve({\n            success: true,\n            data: {\n              user: {\n                id: 1,\n                email: credentials.email,\n                name: 'Demo User',\n                role: 'admin'\n              },\n              token\n            }\n          });\n        } else {\n          resolve({\n            success: false,\n            error: 'Invalid credentials'\n          });\n        }\n      }, 1000);\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","MOCK_MODE","REACT_APP_MOCK_API","ApiService","constructor","authToken","localStorage","getItem","getHeaders","includeAuth","headers","makeRequest","url","options","response","fetch","ok","errorData","json","catch","Error","message","status","error","console","createOrder","orderData","mockCreateOrder","method","body","JSON","stringify","Promise","resolve","setTimeout","orderId","Date","now","trackingId","Math","random","toString","substr","toUpperCase","success","data","customerName","estimatedDelivery","toISOString","pickupAddress","deliveryAddress","packageType","priority","createdAt","getOrderStatus","mockGetOrderStatus","trackOrder","mockTrackOrder","currentLocation","driver","name","phone","vehicle","timeline","timestamp","location","replace","address","coordinates","lat","lng","optimizeRoute","orders","mockOptimizeRoute","getOrders","filters","mockGetOrders","params","URLSearchParams","updateOrderStatus","mockUpdateOrderStatus","getAnalytics","dateRange","mockGetAnalytics","sendNotification","type","mockSendNotification","login","credentials","mockLogin","token","setItem","logout","removeItem","optimizedRoute","map","order","index","sequenceNumber","estimatedTime","distance","totalDistance","totalTime","fuelCost","efficiency","pagination","page","limit","total","updatedAt","totalOrders","deliveredOrders","inTransitOrders","pendingOrders","averageDeliveryTime","onTimeDeliveryRate","customerSatisfaction","costPerDelivery","notificationId","sentAt","email","password","user","id","role"],"sources":["C:/Users/aryan/OneDrive/Desktop/Cloud Computing/smart-logistics-ai-agent/frontend/src/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://api.smartlogistics.com/v1';\r\nconst MOCK_MODE = process.env.REACT_APP_MOCK_API === 'true' || true; // Set to false when real APIs are ready\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.authToken = localStorage.getItem('authToken');\r\n  }\r\n\r\n  // Common headers for all requests\r\n  getHeaders(includeAuth = true) {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    };\r\n\r\n    if (includeAuth && this.authToken) {\r\n      headers['Authorization'] = `Bearer ${this.authToken}`;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  // Common request handler with error handling\r\n  async makeRequest(url, options = {}) {\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          ...this.getHeaders(),\r\n          ...options.headers,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Create a new order\r\n  async createOrder(orderData) {\r\n    if (MOCK_MODE) {\r\n      return this.mockCreateOrder(orderData);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/orders`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(orderData),\r\n    });\r\n  }\r\n\r\n  // Mock implementation for development\r\n  mockCreateOrder(orderData) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const orderId = 'ORD-' + Date.now();\r\n        const trackingId = 'TRK' + Math.random().toString(36).substr(2, 9).toUpperCase();\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            orderId,\r\n            trackingId,\r\n            customerName: orderData.customerName,\r\n            status: 'created',\r\n            estimatedDelivery: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n            pickupAddress: orderData.pickupAddress,\r\n            deliveryAddress: orderData.deliveryAddress,\r\n            packageType: orderData.packageType,\r\n            priority: orderData.priority,\r\n            createdAt: new Date().toISOString(),\r\n          }\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  // Get order status by order ID\r\n  async getOrderStatus(orderId) {\r\n    if (MOCK_MODE) {\r\n      return this.mockGetOrderStatus(orderId);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/orders/${orderId}`);\r\n  }\r\n\r\n  // Track order by tracking ID\r\n  async trackOrder(trackingId) {\r\n    if (MOCK_MODE) {\r\n      return this.mockTrackOrder(trackingId);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/tracking/${trackingId}`);\r\n  }\r\n\r\n  // Mock order status\r\n  mockGetOrderStatus(orderId) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            orderId,\r\n            status: 'in_transit',\r\n            currentLocation: 'Distribution Center - Manhattan',\r\n            estimatedDelivery: '2025-09-27T14:30:00Z',\r\n            driver: {\r\n              name: 'John Driver',\r\n              phone: '+1-555-0123',\r\n              vehicle: 'VAN-001'\r\n            },\r\n            timeline: [\r\n              { status: 'Order Placed', timestamp: '2025-09-26T09:00:00Z', location: 'Online Platform' },\r\n              { status: 'Order Confirmed', timestamp: '2025-09-26T09:15:00Z', location: 'Processing Center' },\r\n              { status: 'Picked Up', timestamp: '2025-09-26T11:00:00Z', location: 'Pickup Location' },\r\n              { status: 'In Transit', timestamp: '2025-09-26T15:00:00Z', location: 'Distribution Center - Manhattan' },\r\n            ]\r\n          }\r\n        });\r\n      }, 1500);\r\n    });\r\n  }\r\n\r\n  // Mock tracking\r\n  mockTrackOrder(trackingId) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            trackingId,\r\n            orderId: 'ORD-' + trackingId.replace('TRK', ''),\r\n            status: 'in_transit',\r\n            currentLocation: {\r\n              address: 'Distribution Center - Manhattan',\r\n              coordinates: { lat: 40.7128, lng: -74.0060 }\r\n            },\r\n            estimatedDelivery: '2025-09-27T14:30:00Z',\r\n            timeline: [\r\n              { status: 'Order Placed', timestamp: '2025-09-26T09:00:00Z', location: 'Online Platform' },\r\n              { status: 'Picked Up', timestamp: '2025-09-26T11:00:00Z', location: 'Pickup Location' },\r\n              { status: 'In Transit', timestamp: '2025-09-26T15:00:00Z', location: 'Distribution Center - Manhattan' },\r\n            ]\r\n          }\r\n        });\r\n      }, 1500);\r\n    });\r\n  }\r\n\r\n  // Route optimization\r\n  async optimizeRoute(orders) {\r\n    if (MOCK_MODE) {\r\n      return this.mockOptimizeRoute(orders);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/optimize-route`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ orders }),\r\n    });\r\n  }\r\n\r\n  // Get all orders with filtering\r\n  async getOrders(filters = {}) {\r\n    if (MOCK_MODE) {\r\n      return this.mockGetOrders(filters);\r\n    }\r\n\r\n    const params = new URLSearchParams(filters);\r\n    return this.makeRequest(`${API_BASE_URL}/orders?${params}`);\r\n  }\r\n\r\n  // Update order status\r\n  async updateOrderStatus(orderId, status, location = null) {\r\n    if (MOCK_MODE) {\r\n      return this.mockUpdateOrderStatus(orderId, status, location);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/orders/${orderId}/status`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ status, location }),\r\n    });\r\n  }\r\n\r\n  // Get delivery analytics\r\n  async getAnalytics(dateRange = '7d') {\r\n    if (MOCK_MODE) {\r\n      return this.mockGetAnalytics(dateRange);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/analytics?range=${dateRange}`);\r\n  }\r\n\r\n  // Send notification\r\n  async sendNotification(orderId, type, message) {\r\n    if (MOCK_MODE) {\r\n      return this.mockSendNotification(orderId, type, message);\r\n    }\r\n\r\n    return this.makeRequest(`${API_BASE_URL}/notifications`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ orderId, type, message }),\r\n    });\r\n  }\r\n\r\n  // Authentication\r\n  async login(credentials) {\r\n    if (MOCK_MODE) {\r\n      return this.mockLogin(credentials);\r\n    }\r\n\r\n    const response = await this.makeRequest(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    if (response.token) {\r\n      this.authToken = response.token;\r\n      localStorage.setItem('authToken', response.token);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async logout() {\r\n    this.authToken = null;\r\n    localStorage.removeItem('authToken');\r\n    \r\n    if (!MOCK_MODE) {\r\n      return this.makeRequest(`${API_BASE_URL}/auth/logout`, {\r\n        method: 'POST',\r\n      });\r\n    }\r\n    \r\n    return Promise.resolve({ success: true });\r\n  }\r\n\r\n  // Mock implementations\r\n  mockOptimizeRoute(orders) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            optimizedRoute: orders.map((order, index) => ({\r\n              ...order,\r\n              sequenceNumber: index + 1,\r\n              estimatedTime: `${10 + index * 15} minutes`,\r\n              distance: `${2.5 + index * 1.2} miles`\r\n            })),\r\n            totalDistance: '15.3 miles',\r\n            totalTime: '2 hours 45 minutes',\r\n            fuelCost: '$12.50',\r\n            efficiency: '87%'\r\n          }\r\n        });\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  mockGetOrders(filters) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: [\r\n            {\r\n              orderId: 'ORD-001',\r\n              customerName: 'John Doe',\r\n              status: 'delivered',\r\n              createdAt: '2025-09-25T10:00:00Z',\r\n              deliveryAddress: '123 Main St, New York, NY'\r\n            },\r\n            {\r\n              orderId: 'ORD-002',\r\n              customerName: 'Jane Smith',\r\n              status: 'in_transit',\r\n              createdAt: '2025-09-26T08:30:00Z',\r\n              deliveryAddress: '456 Oak Ave, Brooklyn, NY'\r\n            }\r\n          ],\r\n          pagination: {\r\n            page: 1,\r\n            limit: 10,\r\n            total: 2\r\n          }\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  mockUpdateOrderStatus(orderId, status, location) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            orderId,\r\n            status,\r\n            location,\r\n            updatedAt: new Date().toISOString()\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  mockGetAnalytics(dateRange) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            totalOrders: 150,\r\n            deliveredOrders: 142,\r\n            inTransitOrders: 6,\r\n            pendingOrders: 2,\r\n            averageDeliveryTime: '4.2 hours',\r\n            onTimeDeliveryRate: '94.7%',\r\n            customerSatisfaction: 4.6,\r\n            costPerDelivery: '$8.50'\r\n          }\r\n        });\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  mockSendNotification(orderId, type, message) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            notificationId: 'NOT-' + Date.now(),\r\n            orderId,\r\n            type,\r\n            message,\r\n            sentAt: new Date().toISOString()\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  mockLogin(credentials) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (credentials.email === 'demo@smartlogistics.com' && credentials.password === 'demo123') {\r\n          const token = 'mock-jwt-token-' + Date.now();\r\n          this.authToken = token;\r\n          localStorage.setItem('authToken', token);\r\n          \r\n          resolve({\r\n            success: true,\r\n            data: {\r\n              user: {\r\n                id: 1,\r\n                email: credentials.email,\r\n                name: 'Demo User',\r\n                role: 'admin'\r\n              },\r\n              token\r\n            }\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            error: 'Invalid credentials'\r\n          });\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}